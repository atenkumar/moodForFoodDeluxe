import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, a as validate_store, c as component_subscribe, o as onMount, w as writable, e as element, b as space, t as text, f as claim_element, g as children, h as claim_space, j as claim_text, k as detach_dev, l as add_location, m as attr_dev, H as HtmlTag, n as insert_dev, p as append_dev, q as set_data_dev, r as empty, u as query_selector_all, x as set_input_value, y as listen_dev, z as noop, A as destroy_each, B as run_all, C as set_style } from './client.b6883820.js';

/* src/routes/index.svelte generated by Svelte v3.19.0 */
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (141:3) {#if business.url && business.image_url}
function create_if_block_3(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				src: true,
				style: true,
				align: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*business*/ ctx[13].image_url)) attr_dev(img, "src", img_src_value);
			set_style(img, "width", "150px");
			set_style(img, "height", "150px");
			attr_dev(img, "align", "middle");
			attr_dev(img, "alt", img_alt_value = "Image of " + /*business*/ ctx[13].name);
			attr_dev(img, "class", "svelte-4rmwa9");
			add_location(img, file, 141, 4, 2639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$businesses*/ 2 && img.src !== (img_src_value = /*business*/ ctx[13].image_url)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*$businesses*/ 2 && img_alt_value !== (img_alt_value = "Image of " + /*business*/ ctx[13].name)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(141:3) {#if business.url && business.image_url}",
		ctx
	});

	return block;
}

// (150:4) {:else}
function create_else_block_2(ctx) {
	let t;
	let html_tag;
	let raw_value = /*priceCon*/ ctx[6]("N/A") + "";

	const block = {
		c: function create() {
			t = text("Price: ");
			this.h();
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Price: ");
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			html_tag.m(target, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(150:4) {:else}",
		ctx
	});

	return block;
}

// (148:4) {#if business.price}
function create_if_block_2(ctx) {
	let t;
	let html_tag;
	let raw_value = /*priceCon*/ ctx[6](/*business*/ ctx[13].price) + "";

	const block = {
		c: function create() {
			t = text("Price: ");
			this.h();
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Price: ");
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$businesses*/ 2 && raw_value !== (raw_value = /*priceCon*/ ctx[6](/*business*/ ctx[13].price) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(148:4) {#if business.price}",
		ctx
	});

	return block;
}

// (157:4) {:else}
function create_else_block_1(ctx) {
	let t;
	let html_tag;
	let raw_value = /*ratingCon*/ ctx[7]("N/A") + "";

	const block = {
		c: function create() {
			t = text("Rating: ");
			this.h();
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Rating: ");
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			html_tag.m(target, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(157:4) {:else}",
		ctx
	});

	return block;
}

// (155:4) {#if business.rating}
function create_if_block_1(ctx) {
	let t;
	let html_tag;
	let raw_value = /*ratingCon*/ ctx[7](/*business*/ ctx[13].rating) + "";

	const block = {
		c: function create() {
			t = text("Rating: ");
			this.h();
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Rating: ");
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$businesses*/ 2 && raw_value !== (raw_value = /*ratingCon*/ ctx[7](/*business*/ ctx[13].rating) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(155:4) {#if business.rating}",
		ctx
	});

	return block;
}

// (167:4) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Address: Not listed - please check link");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Address: Not listed - please check link");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(167:4) {:else}",
		ctx
	});

	return block;
}

// (165:4) {#if business.location.address1}
function create_if_block(ctx) {
	let t0;
	let t1_value = /*business*/ ctx[13].location.address1 + "";
	let t1;
	let t2;
	let t3_value = /*business*/ ctx[13].location.city + "";
	let t3;
	let t4;
	let t5_value = /*business*/ ctx[13].location.state + "";
	let t5;
	let t6;
	let t7_value = /*business*/ ctx[13].location.zip_code + "";
	let t7;

	const block = {
		c: function create() {
			t0 = text("Address: ");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = text(", ");
			t5 = text(t5_value);
			t6 = space();
			t7 = text(t7_value);
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Address: ");
			t1 = claim_text(nodes, t1_value);
			t2 = claim_space(nodes);
			t3 = claim_text(nodes, t3_value);
			t4 = claim_text(nodes, ", ");
			t5 = claim_text(nodes, t5_value);
			t6 = claim_space(nodes);
			t7 = claim_text(nodes, t7_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, t7, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$businesses*/ 2 && t1_value !== (t1_value = /*business*/ ctx[13].location.address1 + "")) set_data_dev(t1, t1_value);
			if (dirty & /*$businesses*/ 2 && t3_value !== (t3_value = /*business*/ ctx[13].location.city + "")) set_data_dev(t3, t3_value);
			if (dirty & /*$businesses*/ 2 && t5_value !== (t5_value = /*business*/ ctx[13].location.state + "")) set_data_dev(t5, t5_value);
			if (dirty & /*$businesses*/ 2 && t7_value !== (t7_value = /*business*/ ctx[13].location.zip_code + "")) set_data_dev(t7, t7_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(t7);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(165:4) {#if business.location.address1}",
		ctx
	});

	return block;
}

// (138:0) {#each $businesses as business}
function create_each_block(ctx) {
	let div1;
	let h2;
	let t0;
	let br0;
	let a;
	let t1_value = /*business*/ ctx[13].name + "";
	let t1;
	let a_href_value;
	let br1;
	let t2;
	let div0;
	let span0;
	let t3;
	let span1;
	let t4;
	let span2;
	let t5;
	let html_tag;
	let raw_value = /*mileConversion*/ ctx[5](/*business*/ ctx[13].distance) + "";
	let t6;
	let span3;
	let t7;
	let if_block0 = /*business*/ ctx[13].url && /*business*/ ctx[13].image_url && create_if_block_3(ctx);

	function select_block_type(ctx, dirty) {
		if (/*business*/ ctx[13].price) return create_if_block_2;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*business*/ ctx[13].rating) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block2 = current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*business*/ ctx[13].location.address1) return create_if_block;
		return create_else_block;
	}

	let current_block_type_2 = select_block_type_2(ctx);
	let if_block3 = current_block_type_2(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			h2 = element("h2");
			if (if_block0) if_block0.c();
			t0 = space();
			br0 = element("br");
			a = element("a");
			t1 = text(t1_value);
			br1 = element("br");
			t2 = space();
			div0 = element("div");
			span0 = element("span");
			if_block1.c();
			t3 = space();
			span1 = element("span");
			if_block2.c();
			t4 = space();
			span2 = element("span");
			t5 = text("Distance: ");
			t6 = space();
			span3 = element("span");
			if_block3.c();
			t7 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h2 = claim_element(div1_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			if (if_block0) if_block0.l(h2_nodes);
			t0 = claim_space(h2_nodes);
			br0 = claim_element(h2_nodes, "BR", {});
			a = claim_element(h2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach_dev);
			br1 = claim_element(h2_nodes, "BR", {});
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			if_block1.l(span0_nodes);
			span0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			span1 = claim_element(div0_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			if_block2.l(span1_nodes);
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			span2 = claim_element(div0_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "Distance: ");
			span2_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);
			span3 = claim_element(div0_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			if_block3.l(span3_nodes);
			span3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file, 143, 3, 2764);
			attr_dev(a, "href", a_href_value = /*business*/ ctx[13].url);
			add_location(a, file, 143, 7, 2768);
			add_location(br1, file, 143, 49, 2810);
			attr_dev(h2, "class", "svelte-4rmwa9");
			add_location(h2, file, 139, 2, 2586);
			attr_dev(span0, "class", "svelte-4rmwa9");
			add_location(span0, file, 146, 3, 2850);
			attr_dev(span1, "class", "svelte-4rmwa9");
			add_location(span1, file, 153, 3, 2999);
			html_tag = new HtmlTag(raw_value, null);
			attr_dev(span2, "class", "svelte-4rmwa9");
			add_location(span2, file, 160, 3, 3154);
			attr_dev(span3, "class", "svelte-4rmwa9");
			add_location(span3, file, 163, 3, 3232);
			attr_dev(div0, "class", "center svelte-4rmwa9");
			add_location(div0, file, 145, 2, 2825);
			attr_dev(div1, "class", "business svelte-4rmwa9");
			add_location(div1, file, 138, 2, 2559);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h2);
			if (if_block0) if_block0.m(h2, null);
			append_dev(h2, t0);
			append_dev(h2, br0);
			append_dev(h2, a);
			append_dev(a, t1);
			append_dev(h2, br1);
			append_dev(div1, t2);
			append_dev(div1, div0);
			append_dev(div0, span0);
			if_block1.m(span0, null);
			append_dev(div0, t3);
			append_dev(div0, span1);
			if_block2.m(span1, null);
			append_dev(div0, t4);
			append_dev(div0, span2);
			append_dev(span2, t5);
			html_tag.m(span2);
			append_dev(div0, t6);
			append_dev(div0, span3);
			if_block3.m(span3, null);
			append_dev(div1, t7);
		},
		p: function update(ctx, dirty) {
			if (/*business*/ ctx[13].url && /*business*/ ctx[13].image_url) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(h2, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$businesses*/ 2 && t1_value !== (t1_value = /*business*/ ctx[13].name + "")) set_data_dev(t1, t1_value);

			if (dirty & /*$businesses*/ 2 && a_href_value !== (a_href_value = /*business*/ ctx[13].url)) {
				attr_dev(a, "href", a_href_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(span0, null);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(span1, null);
				}
			}

			if (dirty & /*$businesses*/ 2 && raw_value !== (raw_value = /*mileConversion*/ ctx[5](/*business*/ ctx[13].distance) + "")) html_tag.p(raw_value);

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_2(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(span3, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if_block1.d();
			if_block2.d();
			if_block3.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(138:0) {#each $businesses as business}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let p;
	let strong;
	let input;
	let br0;
	let t3;
	let br1;
	let t4;
	let button;
	let t5;
	let t6;
	let each_1_anchor;
	let dispose;
	let each_value = /*$businesses*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("What are you in the mood for?");
			t2 = space();
			p = element("p");
			strong = element("strong");
			input = element("input");
			br0 = element("br");
			t3 = space();
			br1 = element("br");
			t4 = space();
			button = element("button");
			t5 = text("Find Restaurants!");
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-dmhg8z\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "What are you in the mood for?");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);

			input = claim_element(strong_nodes, "INPUT", {
				required: true,
				type: true,
				id: true,
				class: true
			});

			br0 = claim_element(strong_nodes, "BR", {});
			t3 = claim_space(strong_nodes);
			br1 = claim_element(strong_nodes, "BR", {});
			t4 = claim_space(strong_nodes);
			button = claim_element(strong_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, "Find Restaurants!");
			button_nodes.forEach(detach_dev);
			strong_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "MoodForFood.com";
			attr_dev(h1, "class", "svelte-4rmwa9");
			add_location(h1, file, 128, 0, 2274);
			input.required = true;
			attr_dev(input, "type", "text");
			attr_dev(input, "id", "craving");
			attr_dev(input, "class", "textbox svelte-4rmwa9");
			add_location(input, file, 131, 1, 2327);
			add_location(br0, file, 131, 82, 2408);
			add_location(br1, file, 132, 1, 2414);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "submitbutton svelte-4rmwa9");
			add_location(button, file, 133, 1, 2420);
			add_location(strong, file, 130, 3, 2317);
			attr_dev(p, "class", "svelte-4rmwa9");
			add_location(p, file, 130, 0, 2314);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, strong);
			append_dev(strong, input);
			set_input_value(input, /*$craving*/ ctx[0]);
			append_dev(strong, br0);
			append_dev(strong, t3);
			append_dev(strong, br1);
			append_dev(strong, t4);
			append_dev(strong, button);
			append_dev(button, t5);
			insert_dev(target, t6, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);

			dispose = [
				listen_dev(input, "input", /*input_input_handler*/ ctx[12]),
				listen_dev(button, "click", /*restAsk*/ ctx[4], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$craving*/ 1 && input.value !== /*$craving*/ ctx[0]) {
				set_input_value(input, /*$craving*/ ctx[0]);
			}

			if (dirty & /*$businesses, mileConversion, ratingCon, priceCon*/ 226) {
				each_value = /*$businesses*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t6);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $craving;
	let $businesses;
	let businesses = writable([]);
	validate_store(businesses, "businesses");
	component_subscribe($$self, businesses, value => $$invalidate(1, $businesses = value));
	let craving = writable("");
	validate_store(craving, "craving");
	component_subscribe($$self, craving, value => $$invalidate(0, $craving = value));
	let lat = 0;
	let long = 0;

	onMount(() => {
		getLocation();
	});

	function getLocation() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(setLocation);
		} else {
			alert("Geolocation is not supported by this browser.");
		}
	}

	function setLocation(position) {
		lat = position.coords.latitude;
		long = position.coords.longitude;
	}

	function restAsk() {
		fetch("https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=" + $craving + "&latitude=" + lat + "&longitude=" + long + "&sort_by=distance", {
			headers: {
				"Authorization": "Bearer LiGV8vc0W0UyHl3bCiywBSyowbmik2x0NnW2sAk7cD3UL7hjt2Njv5tCyIPDK0fXUKJfLdJ8Skw-jdyUqRM-oPBdyPIlGYngBhugVVZU9UNks_ARjx3KJPwMASlSXnYx"
			}
		}).then(response => {
			return response.json();
		}).catch(err => {
			console.error(error);
		}).then(data => {
			console.log(data);
			businesses.set(data.businesses);
		});
	}

	const mileConversion = i => `<h1>${(i * 0.000621371192).toFixed(1)} mi</h1>`;
	const priceCon = p => `<h1>${p}</h1>`;
	const ratingCon = r => `<h1>${r}</h1>`;

	function input_input_handler() {
		$craving = this.value;
		craving.set($craving);
	}

	$$self.$capture_state = () => ({
		onMount,
		writable,
		businesses,
		craving,
		lat,
		long,
		getLocation,
		setLocation,
		restAsk,
		mileConversion,
		priceCon,
		ratingCon,
		navigator,
		alert,
		fetch,
		$craving,
		console,
		error,
		$businesses
	});

	$$self.$inject_state = $$props => {
		if ("businesses" in $$props) $$invalidate(2, businesses = $$props.businesses);
		if ("craving" in $$props) $$invalidate(3, craving = $$props.craving);
		if ("lat" in $$props) lat = $$props.lat;
		if ("long" in $$props) long = $$props.long;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		$craving,
		$businesses,
		businesses,
		craving,
		restAsk,
		mileConversion,
		priceCon,
		ratingCon,
		lat,
		long,
		getLocation,
		setLocation,
		input_input_handler
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
